# More documentation about how to customize your build
# can be found here:
# https://docs.fastlane.tools
fastlane_version "1.109.0"

before_all do
	
end

platform :ios do
	lane :test do
		update_cartfile_with_core_commit_hash_if_workflow_triggered_by_core
		carthage(
			command: "update",
			platform: "iOS",
			configuration: "Release",
			cache_builds: true
		)
		scan(
			scheme: "InstantSearch",
			configuration: "Debug",
			clean: true
		)
	end
end


desc "Available options: type:major|minor|patch"
lane :deploy do |options|
	prepare_git('master')
	pod_lib_lint(
		verbose: true,
		allow_warnings: true
	)
	increment_version_number(
  		bump_type: options[:type]
	)
	new_build_number = version_bump_podspec(
		bump_type: options[:type],
		path: "InstantSearch.podspec"
	)

	#puts changelog_from_git_commits
	git_commit(
		path: ["InstantSearch.podspec", "Sources/Info.plist" ,"Tests/Info.plist", "InstantSearchTestsHost/Info.plist"], 
		message: "Version #{new_build_number}"
	)
	add_git_tag(
		build_number: new_build_number,
		tag: new_build_number
	)
	push_to_git_remote(remote: "origin")
	pod_push(
		path: "InstantSearch.podspec",
		allow_warnings: true
	)

	publish_community_website
end

desc "Upgrade Swift Version in .swift-version"
# Force cocoapods to compile with 'swift-version'
lane :upgrade_swift do |options|
	version = options[:version]
	sh("echo #{version} > ../.swift-version")
	puts "\e[31m\e[5mDon't forget to update the swift version in the dependecies: .podspecs & cartfile'\e[0m"
end

def prepare_git(branch)
	ensure_git_status_clean
	# ensure_git_branch(branch:branch)
	masterHash = sh("git rev-parse origin/#{branch}")
	headHash = sh("git rev-parse HEAD")
	
	if masterHash != headHash 
		raise "Error: Master and Head Hashes do not match, meaning that we are probably not on Master and therefore can't deploy"
	end

	sh("git checkout #{branch}")
	
	# git_pull
end

def update_cartfile_with_core_commit_hash_if_workflow_triggered_by_core()
	if ENV['GIT_DEPENDENT_COMMIT_HASH']
		if !ENV['pull_request_repository_url'].to_s.empty?
			File.write("../Cartfile", "git \"#{ENV["pull_request_repository_url"]}\" \"#{ENV["GIT_DEPENDENT_COMMIT_HASH"]}\"")
			puts "Changed Cartfile to refer to #{ENV["pull_request_repository_url"]} with commit #{ENV["GIT_DEPENDENT_COMMIT_HASH"]}"
		else
			File.write("../Cartfile", "github \"algolia/instantsearch-core-swift\" \"#{ENV["GIT_DEPENDENT_COMMIT_HASH"]}\"")
		puts "Changed Cartfile to refer to algolia/instantsearch-core-swift with commit #{ENV["GIT_DEPENDENT_COMMIT_HASH"]}"
		end
	else 
		puts "No specific dependencies to test, proceeding with latest release of dependent library"
	end
end

lane :publish_community_website do
	# build community website
	sh("cd ../docgen && yarn add gh-pages && NODE_ENV='production' npm run build")
	# Generate API reference
	jazzy
	# Publish community website and API reference to gh pages
	sh("cd ../docgen && npm run deploy")
end

after_all do
  #slack
end
